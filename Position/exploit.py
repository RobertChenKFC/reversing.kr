import struct

def bit(name, pos):
    return (name >> pos) & 1

def valid(names):
    n0, n1, n2, n3 = names[0], names[1], names[2], names[3]
    return (bit(n0, 0) != bit(n1, 2) and
            bit(n0, 3) == 0 and bit(n1, 3) == 0 and
            bit(n0, 1) == 1 and bit(n1, 4) == 1 and
            bit(n0, 2) != bit(n1, 0) and
            bit(n0, 4) == 0 and bit(n1, 1) == 0 and
            bit(n2, 0) != bit(n3, 2) and
            bit(n2, 3) != bit(n3, 3) and
            bit(n2, 1) != bit(n3, 4) and
            bit(n2, 2) != bit(n3, 0) and
            bit(n2, 4) == 0 and bit(n3, 1) == 0)

def try_names(names=[0] * 4, idx=0):
    if idx == 4:
        if valid(names):
            print(b''.join([struct.pack('B', name) for name in names]))
        return

    for i in range(0x20, 0x7f):
        names[idx] = i
        try_names(names, idx + 1)

try_names()

